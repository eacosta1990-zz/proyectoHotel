package controladores;

import javax.servlet.http.HttpServlet;
import java.io.IOException;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Set;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.xml.sax.helpers.ParserFactory;

import datos.Cliente;
import datos.Estadia;
import datos.Estado;
import datos.Frigobar;
import datos.Habitacion;
import datos.Mail;
import datos.TipoHabitacion;
import funciones.Funciones;
import negocio.ClienteABM;
import negocio.EstadiaABM;
import negocio.EstadoABM;
import negocio.Facade;
import negocio.FrigobarABM;
import negocio.HabitacionABM;
import negocio.TipoHabitacionABM;

public class ControladorAltaEstadia extends HttpServlet {
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		procesarPeticion(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		procesarPeticion(request, response);
	}

	private void procesarPeticion(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		response.setContentType("text/html;charset=UTF-8");

		try {
			Facade facade = new Facade();
			EstadiaABM Estadiaabm = facade.getEstadiaABM();
			Estadia estadia =  new Estadia();

			EstadoABM estadoABM = facade.getEstadoABM();
			FrigobarABM frigobarABM = facade.getFrigobarABM();
			HabitacionABM habitacionABM = facade.getHabitacionABM();
			TipoHabitacionABM tipoHabitacionabm = facade.getTipoHabitacionABM();
			TipoHabitacion tipoHabitacion = new TipoHabitacion();
			Cliente cliente= new Cliente();
			ClienteABM clienteabm=facade.getClienteABM();
			Habitacion habitacion=new Habitacion();
			HabitacionABM habitacionabm = facade.getHabitacionABM();
			Mail mail=new Mail();
			List<Estado> ListaEstado = estadoABM.traerEstado();
			List<TipoHabitacion> ListaTipoHabitacion = tipoHabitacionabm.traerTipoHabitacion();
			List<Habitacion> ListaHabitacion = habitacionABM.traerHabitacionDisponible();

			request.setAttribute("ListaTipoHabitacion", ListaTipoHabitacion);
			request.setAttribute("ListaEstado", ListaEstado);
			request.setAttribute("ListaHabitacion", ListaHabitacion);

			if (request.getParameter("senia") != null) {

				float precio = 0;
				float senia = Float.parseFloat(request.getParameter("senia"));
				GregorianCalendar desde = Funciones.obtenerFecha(request.getParameter("desde"));
				GregorianCalendar hasta = Funciones.obtenerFecha(request.getParameter("hasta"));;
				long dni=Long.parseLong(request.getParameter("dni"));
				System.out.println(desde);
				System.out.println(hasta);


				GregorianCalendar reserva=Funciones.obtenerFechaActual();
				System.out.println(reserva);

				Funciones.esFechaValida(desde);
				Funciones.esFechaValida(hasta);
				
				if(desde.before(hasta)!=true || desde.equals(hasta)==true){
					throw new Exception("fecha hasta tiene que ser mayor a fecha desde");
				}
				
				if(desde.before(reserva)==true){
					throw new Exception("desde tiene que ser mayor dia reserva");

				}
				

				long diasEstadia=Funciones.diferenciaDias(desde,hasta);
				System.out.println(diasEstadia);
				
				habitacion= habitacionabm.traerHabitacion(Integer.parseInt(request.getParameter("idHabitacion")));
				System.out.println(habitacionabm.traerHabitacion(Integer.parseInt(request.getParameter("idHabitacion"))));
				
				tipoHabitacion=tipoHabitacionabm.traerTipoHabitacion(Integer.parseInt(request.getParameter("idTipoHabitacion")));
				System.out.println(tipoHabitacionabm.traerTipoHabitacion(Integer.parseInt(request.getParameter("idTipoHabitacion"))));
				
				precio=tipoHabitacion.getPrecio()*diasEstadia;
				System.out.println(precio);
				
				float diferencia=precio-senia;
				int opcion=0;
				if (diferencia==0){
					opcion=1;
				}
				else 
				{
					opcion=2;
				}
				if (clienteabm.traerCliente(dni)!=null){
					cliente=clienteabm.traerCliente(dni);
				}
				else
				{
					throw new Exception("DNI INVALIDO");
				}
				int id=cliente.getIdCliente();
				Estado estado = estadoABM.traerEstado(opcion);
				Frigobar frigobar = frigobarABM.traerFrigobar(1);
				

				int id_insert = 0;
			
 
				try {
					
					id_insert = Estadiaabm.agregar(desde, hasta, senia, reserva, precio, estado, frigobar);
					estadia=(Estadia) Estadiaabm.traerEstadia(id_insert);
					Set<Estadia> esta= cliente.getEstadia();
					esta.add(estadia);
					habitacion.setDisponible(2);
					habitacionabm.modificar(habitacion);
					cliente.setEstadia(esta);
					cliente.getEstadia();
					clienteabm.modificar(cliente);
					mail.send(cliente, cliente.getEmail());
					
					
					
					
				} catch (Exception e) {
					HttpSession session = request.getSession();
					session.setAttribute("msgErr", "No se puede agregar el registro");
				}

				request.setAttribute("insert_hecho", "OK");

			}

			response.setStatus(200);

			request.getRequestDispatcher("/altaEstadia.jsp").forward(request, response);

		} catch (Exception e) {
			response.sendError(500, e.getMessage());
		}
	}
}
